<source>
  type forward
  port 24224
  bind 0.0.0.0
</source>

<filter docker.*>
  @type parser
  format json
  key_name log
  reserve_data true
</filter>

# Tag each event with the type of log that created it
<match docker.*>
  @type rewrite_tag_filter
  rewriterule1 logger_name ^(.*)$ ${tag}.logger.$1
</match>

<filter docker.*.logger.http.request>
  @type parser
  format /^(?<octet_one>\d{1,3}).(?<octet_two>\d{1,3}).(?<octet_three>\d{1,3}).\d{1,3} (?<host>[^ ]*) (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")? (?<latency>[^ ]*)$/
  time_format %d/%b/%Y:%H:%M:%S %z
  reserve_data true
  key_name message
</filter>

# Anonymize logs
<filter docker.*.logger.http.request>
  @type record_transformer
  remove_keys octet_one,octet_two,octet_three
  <record>
    ip "${octet_one}.${octet_two}.${octet_three}.0"
  </record>
</filter>

# Remove cruft
<filter docker.*.logger.http.request>
  @type record_transformer
  remove_keys message
</filter>

<match docker.*.logger.**>
  type copy

  <store>
    type stdout
  </store>

  <store>
    type sumologic
    endpoint https://endpoint1.collection.eu.sumologic.com/receiver/v1/http/${sumologic_key}
    log_format json
  </store>
</match>
