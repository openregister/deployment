---
- stat: path="group_vars/tag_Environment_{{ vpc }}"
  register: overrides

- include_vars: "group_vars/tag_Environment_{{ vpc }}"
  when: overrides.stat.exists

- name: Create config directories
  file: name="{{ item }}" state=directory mode=0700
  with_items:
    - "{{ workdir }}"
    - "{{ workdir }}/{{ vpc }}"
    - "{{ workdir }}/{{ vpc }}/indexer"

- name: Create config register directories
  file: name="{{ workdir }}/{{ vpc }}/{{ item.0 }}/{{ item.1 }}" state=directory mode=0700
  with_nested:
    - registers
    - services

- name: Copy static files
  template:
    src="templates/{{ item }}.j2" dest="{{ workdir }}/{{ vpc }}/{{ item }}"
  with_items:
    - 'fields.yaml'
    - 'registers.yaml'

- name: Generate configuration files
  template:
    src="templates/{{ item.1 }}-config.yaml.j2"
    dest="{{ workdir }}/{{ vpc }}/{{ item.0 }}/{{ item.1 }}/{{ services[item.1] }}"

  vars:
    rds_instance_name: "{{ vpc }}-{{ item.1 }}-db"
    password_store_key: "{{ vpc }}/rds/{{ item.1 }}/{{ item.0 }}"
    db_name: "{{ item.0 }}"
    db_user: "{{ item.0 }}_{{ item.1 }}"
    db_password: "{{ lookup('pass', '{{ vpc }}/rds/{{ item.1 }}/{{ item.0 }}') }}"
    db_host: "{{ groups[rds_instance_name][0] }}"
    register_name: "{{ item.0 }}"
    app_user: 'openregister'
    app_password: "{{ lookup('pass', '{{ vpc }}/app/mint/{{ item.0 }}') }}"
    settings: "{{ register_settings[item.0] | default({}) }}"

  with_nested:
    - registers
    - services

- name: Generate indexer.properties
  template:
    src="templates/indexer.properties.j2" dest="{{ workdir }}/{{ vpc }}/indexer/indexer.properties"
  vars:
    src_host: "{{ groups[rds_mint_instance_name][0] }}"
    dst_host: "{{ groups[rds_presentation_instance_name][0] }}"
    databases: "{{ registers }}"
    password: "{{ indexer_passwords }}"

- name: Upload configuration to S3 bucket
  command: "aws s3 sync {{ workdir }}/{{ vpc }}/ s3://{{ s3_bucket_prefix }}.{{ vpc }}.{{ s3_bucket_suffix }}"
  register: s3_output
